import sqlite3
import os
import logging
from logging.handlers import RotatingFileHandler
import requests
from dotenv import load_dotenv
import telebot
from telebot import types
from datetime import datetime
import threading
from functools import lru_cache

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
def setup_logging():
    os.makedirs('logs', exist_ok=True)
    
    log_format = '%(asctime)s - %(name)s - %(levelname)s - ChatID: %(chat_id)s - %(message)s'
    formatter = logging.Formatter(log_format)

    file_handler = RotatingFileHandler(
        'logs/bot.log',
        maxBytes=5*1024*1024,
        backupCount=3,
        encoding='utf-8'
    )
    file_handler.setFormatter(formatter)

    logger = logging.getLogger()
    logger.setLevel(logging.INFO)
    logger.addHandler(file_handler)
    
    return logger

logger = setup_logging()

# –ö–ª–∞—Å—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ë–î
class DatabaseManager:
    _instance = None
    _lock = threading.Lock()
    
    def __new__(cls):
        if cls._instance is None:
            with cls._lock:
                if cls._instance is None:
                    cls._instance = super().__new__(cls)
                    cls._instance._init_db()
        return cls._instance
    
    def _init_db(self):
        self.connections = {}
        self._setup_database()
    
    def _setup_database(self):
        """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ë–î"""
        conn = sqlite3.connect('dialog_history.db', check_same_thread=False)
        cursor = conn.cursor()
        
        # –û–ø—Ç–∏–º–∏–∑–∞—Ü–∏—è –ë–î
        cursor.execute('PRAGMA journal_mode = WAL')
        cursor.execute('PRAGMA synchronous = NORMAL')
        cursor.execute('PRAGMA cache_size = -10000')
        
        cursor.execute('''
        CREATE TABLE IF NOT EXISTS messages (
            id INTEGER PRIMARY KEY AUTOINCREMENT,
            chat_id INTEGER NOT NULL,
            role TEXT NOT NULL,
            content TEXT NOT NULL,
            timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
        )''')
        
        cursor.execute('CREATE INDEX IF NOT EXISTS idx_chat_id ON messages(chat_id)')
        cursor.execute('CREATE INDEX IF NOT EXISTS idx_timestamp ON messages(timestamp)')
        
        cursor.execute('''
        CREATE TRIGGER IF NOT EXISTS cleanup_old_messages
        AFTER INSERT ON messages
        BEGIN
            DELETE FROM messages 
            WHERE timestamp < datetime('now', '-7 days');
        END''')
        
        cursor.execute('PRAGMA optimize')
        conn.commit()
        conn.close()
    
    def get_connection(self):
        """–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è –¥–ª—è —Ç–µ–∫—É—â–µ–≥–æ –ø–æ—Ç–æ–∫–∞"""
        thread_id = threading.get_ident()
        if thread_id not in self.connections:
            conn = sqlite3.connect(
                'dialog_history.db',
                check_same_thread=False
            )
            conn.execute('PRAGMA foreign_keys = ON')
            self.connections[thread_id] = conn
        return self.connections[thread_id]
    
    def close_all(self):
        """–ó–∞–∫—Ä—ã—Ç–∏–µ –≤—Å–µ—Ö —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π"""
        for conn in self.connections.values():
            conn.close()
        self.connections.clear()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ –ë–î
db_manager = DatabaseManager()

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞
try:
    bot = telebot.TeleBot(os.getenv('TELEGRAM_AI'))
    logger.info("–ë–æ—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω", extra={'chat_id': 'SYSTEM'})
except Exception as e:
    logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–æ—Ç–∞: {str(e)}", extra={'chat_id': 'SYSTEM'})
    exit()

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è YandexGPT API
YC_API_URL = "https://llm.api.cloud.yandex.net/foundationModels/v1/completion"
HEADERS = {
    "Authorization": f"Api-Key {os.getenv('YC_API_KEY')}",
    "x-folder-id": os.getenv('YC_FOLDER_ID'),
    "Content-Type": "application/json"
}

def filter_response(text: str) -> str:
    """–§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–µ–Ω—É–∂–Ω—ã—Ö —Ñ—Ä–∞–∑ –≤ –æ—Ç–≤–µ—Ç–∞—Ö"""
    unwanted_phrases = [
        "–∫–∞–∫ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç",
        "—è –æ–±—É—á–µ–Ω–Ω–∞—è –º–æ–¥–µ–ª—å",
        "–Ω–∞—Å–∫–æ–ª—å–∫–æ —è –ø–æ–Ω–∏–º–∞—é",
        "–≤–æ—Ç —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã–π –æ—Ç–≤–µ—Ç",
        "–∫–∞–∫ —è–∑—ã–∫–æ–≤–∞—è –º–æ–¥–µ–ª—å"
    ]
    
    for phrase in unwanted_phrases:
        text = text.replace(phrase, "")
    
    return text.strip()

@lru_cache(maxsize=500)
def get_cached_response(chat_id: int, prompt: str) -> str:
    """–ö–µ—à–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–æ–≤ —Å —É—á–µ—Ç–æ–º chat_id"""
    return ask_yandex_gpt(prompt, chat_id)

def get_dialog_history(chat_id: int, max_messages: int = 7) -> list:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏–∏ –¥–∏–∞–ª–æ–≥–∞"""
    conn = db_manager.get_connection()
    cursor = conn.cursor()
    cursor.execute('''
    SELECT role, content FROM messages 
    WHERE chat_id = ? 
    ORDER BY timestamp DESC 
    LIMIT ?
    ''', (chat_id, max_messages))
    return cursor.fetchall()[::-1]

def save_message(chat_id: int, role: str, content: str) -> None:
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏—é"""
    conn = db_manager.get_connection()
    cursor = conn.cursor()
    cursor.execute('''
    INSERT INTO messages (chat_id, role, content) 
    VALUES (?, ?, ?)
    ''', (chat_id, role, content))
    conn.commit()

def ask_yandex_gpt(prompt: str, chat_id: int) -> str:
    """–ó–∞–ø—Ä–æ—Å –∫ YandexGPT —Å –∏—Å—Ç–æ—Ä–∏–µ–π –¥–∏–∞–ª–æ–≥–∞"""
    history = get_dialog_history(chat_id)
    
    messages = [{
        "role": "system",
        "text": "–¢—ã - —Ç–æ—á–Ω—ã–π AI-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É. –ò–∑–±–µ–≥–∞–π –≤–≤–æ–¥–Ω—ã—Ö —Ñ—Ä–∞–∑."
    }]
    
    for role, content in history:
        messages.append({"role": role, "text": content})
    
    messages.append({"role": "user", "text": prompt})
    
    data = {
        "modelUri": f"gpt://{os.getenv('YC_FOLDER_ID')}/yandexgpt",
        "completionOptions": {
            "stream": False,
            "temperature": 0.2,
            "maxTokens": 400
        },
        "messages": messages
    }

    try:
        response = requests.post(YC_API_URL, json=data, headers=HEADERS, timeout=15)
        response.raise_for_status()
        result = response.json()["result"]["alternatives"][0]["message"]["text"]
        result = filter_response(result)
        
        save_message(chat_id, "user", prompt)
        save_message(chat_id, "assistant", result)
        
        return result
        
    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ YandexGPT: {str(e)}", extra={'chat_id': chat_id})
        return "‚ö†Ô∏è –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞"
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {str(e)}", extra={'chat_id': chat_id})
        return "‚ö†Ô∏è –°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞"

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@bot.message_handler(commands=['start', 'help'])
def send_welcome(message):
    try:
        welcome_text = (
            "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç\n\n"
            "–û—Ç–≤–µ—á–∞—é –∫—Ä–∞—Ç–∫–æ –∏ –ø–æ –¥–µ–ª—É.\n"
            "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
            "/clear - –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –¥–∏–∞–ª–æ–≥–∞\n\n"
            "–ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å!"
        )
        bot.reply_to(message, welcome_text)
        logger.info("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞", extra={'chat_id': message.chat.id})
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤ send_welcome: {str(e)}", extra={'chat_id': message.chat.id})

@bot.message_handler(commands=['clear'])
def clear_history(message):
    try:
        conn = db_manager.get_connection()
        cursor = conn.cursor()
        cursor.execute('DELETE FROM messages WHERE chat_id = ?', (message.chat.id,))
        conn.commit()
        get_cached_response.cache_clear()  # –û—á–∏—â–∞–µ–º –∫–µ—à
        bot.reply_to(message, "üóëÔ∏è –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–∞ –æ—á–∏—â–µ–Ω–∞!")
        logger.info(f"–ò—Å—Ç–æ—Ä–∏—è –æ—á–∏—â–µ–Ω–∞ –¥–ª—è chat_id: {message.chat.id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ—á–∏—Å—Ç–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏: {str(e)}", extra={'chat_id': message.chat.id})
        bot.reply_to(message, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é")

@bot.message_handler(func=lambda message: True)
def handle_message(message):
    try:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Å—Ç—ã—Ö –∫–æ–º–∞–Ω–¥ –±–µ–∑ API
        lower_text = message.text.lower().strip()
        if lower_text in ["–ø—Ä–∏–≤–µ—Ç", "–∑–¥—Ä–∞–≤—Å—Ç–≤—É–π"]:
            return bot.reply_to(message, "–ü—Ä–∏–≤–µ—Ç! –ß–µ–º –ø–æ–º–æ—á—å?")
            
        if len(message.text) > 500:
            return bot.reply_to(message, "‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω–æ–µ. –ú–∞–∫—Å–∏–º—É–º 500 —Å–∏–º–≤–æ–ª–æ–≤.")
        
        bot.send_chat_action(message.chat.id, 'typing')
        response = get_cached_response(message.chat.id, message.text[:300])  # –ö–µ—à–∏—Ä—É–µ–º
        bot.reply_to(message, response)
        logger.info(f"–û—Ç–≤–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω", extra={'chat_id': message.chat.id})
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {str(e)}", extra={'chat_id': message.chat.id})
        bot.reply_to(message, "‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

if __name__ == '__main__':
    try:
        logger.info("----- –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω -----", extra={'chat_id': 'SYSTEM'})
        bot.infinity_polling()
    except KeyboardInterrupt:
        logger.info("----- –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω -----", extra={'chat_id': 'SYSTEM'})
    except Exception as e:
        logger.critical(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {str(e)}", extra={'chat_id': 'SYSTEM'})
    finally:
        db_manager.close_all()
        logger.info("----- –†–µ—Å—É—Ä—Å—ã –æ—Å–≤–æ–±–æ–∂–¥–µ–Ω—ã -----", extra={'chat_id': 'SYSTEM'})